// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream.proto

package stream

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("stream.proto", fileDescriptor_bb17ef3f514bfe54) }

var fileDescriptor_bb17ef3f514bfe54 = []byte{
	// 123 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2e, 0x29, 0x4a,
	0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0xa4, 0x78, 0x8a, 0x33,
	0x73, 0x0b, 0x72, 0x52, 0x21, 0xa2, 0x46, 0x6e, 0x5c, 0x1c, 0xce, 0xc1, 0xc1, 0x60, 0x19, 0x21,
	0x2b, 0x2e, 0x36, 0x28, 0x4b, 0x54, 0x0f, 0xaa, 0x35, 0x20, 0x31, 0x39, 0x3b, 0x31, 0x3d, 0x55,
	0xcf, 0xad, 0x28, 0x31, 0x37, 0x55, 0x0a, 0xbb, 0xb0, 0x06, 0xa3, 0x01, 0xa3, 0x91, 0x1f, 0x17,
	0x6f, 0x30, 0xd8, 0xdc, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x5b, 0x98, 0x40, 0x50,
	0x6a, 0x61, 0x69, 0x6a, 0x71, 0x09, 0x69, 0x66, 0x26, 0xb1, 0x81, 0x9d, 0x67, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0x80, 0x77, 0x29, 0xd1, 0xc4, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CSStreamClient is the client API for CSStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CSStreamClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (CSStream_StreamClient, error)
}

type cSStreamClient struct {
	cc *grpc.ClientConn
}

func NewCSStreamClient(cc *grpc.ClientConn) CSStreamClient {
	return &cSStreamClient{cc}
}

func (c *cSStreamClient) Stream(ctx context.Context, opts ...grpc.CallOption) (CSStream_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CSStream_serviceDesc.Streams[0], "/stream.CSStream/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cSStreamStreamClient{stream}
	return x, nil
}

type CSStream_StreamClient interface {
	Send(*Package_Frame) error
	Recv() (*Package_Frame, error)
	grpc.ClientStream
}

type cSStreamStreamClient struct {
	grpc.ClientStream
}

func (x *cSStreamStreamClient) Send(m *Package_Frame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cSStreamStreamClient) Recv() (*Package_Frame, error) {
	m := new(Package_Frame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CSStreamServer is the server API for CSStream service.
type CSStreamServer interface {
	Stream(CSStream_StreamServer) error
}

func RegisterCSStreamServer(s *grpc.Server, srv CSStreamServer) {
	s.RegisterService(&_CSStream_serviceDesc, srv)
}

func _CSStream_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CSStreamServer).Stream(&cSStreamStreamServer{stream})
}

type CSStream_StreamServer interface {
	Send(*Package_Frame) error
	Recv() (*Package_Frame, error)
	grpc.ServerStream
}

type cSStreamStreamServer struct {
	grpc.ServerStream
}

func (x *cSStreamStreamServer) Send(m *Package_Frame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cSStreamStreamServer) Recv() (*Package_Frame, error) {
	m := new(Package_Frame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CSStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.CSStream",
	HandlerType: (*CSStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _CSStream_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}

// SimpleServiceClient is the client API for SimpleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimpleServiceClient interface {
	SimpleRequest(ctx context.Context, in *Package_Frame, opts ...grpc.CallOption) (*Package_Frame, error)
}

type simpleServiceClient struct {
	cc *grpc.ClientConn
}

func NewSimpleServiceClient(cc *grpc.ClientConn) SimpleServiceClient {
	return &simpleServiceClient{cc}
}

func (c *simpleServiceClient) SimpleRequest(ctx context.Context, in *Package_Frame, opts ...grpc.CallOption) (*Package_Frame, error) {
	out := new(Package_Frame)
	err := c.cc.Invoke(ctx, "/stream.SimpleService/SimpleRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleServiceServer is the server API for SimpleService service.
type SimpleServiceServer interface {
	SimpleRequest(context.Context, *Package_Frame) (*Package_Frame, error)
}

func RegisterSimpleServiceServer(s *grpc.Server, srv SimpleServiceServer) {
	s.RegisterService(&_SimpleService_serviceDesc, srv)
}

func _SimpleService_SimpleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Package_Frame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServiceServer).SimpleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.SimpleService/SimpleRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServiceServer).SimpleRequest(ctx, req.(*Package_Frame))
	}
	return interceptor(ctx, in, info, handler)
}

var _SimpleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.SimpleService",
	HandlerType: (*SimpleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimpleRequest",
			Handler:    _SimpleService_SimpleRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stream.proto",
}
